// Clock functionality
function updateClock() {
  const now = new Date();
  const hours = String(now.getHours()).padStart(2, '0');
  const minutes = String(now.getMinutes()).padStart(2, '0');
  const seconds = String(now.getSeconds()).padStart(2, '0');
  document.getElementById('clock').textContent = `${hours}:${minutes}:${seconds}`;
}

// Weather data (mock data for demonstration)
const weatherData = {
  temperature: [28, 29, 31, 30, 29, 27, 28],
  humidity: [70, 75, 65, 80, 85, 78, 72],
  rainfall: [5, 10, 0, 20, 15, 8, 12],
  days: ["T2", "T3", "T4", "T5", "T6", "T7", "CN"]
};

// Feature messages
const featureMessages = {
  weather: 'ƒêang t·∫£i th√¥ng tin th·ªùi ti·∫øt ƒë·ªãa ph∆∞∆°ng...\n\nüìç V·ªã tr√≠: ƒê√† N·∫µng\nüå°Ô∏è Nhi·ªát ƒë·ªô: 28¬∞C\nüíß ƒê·ªô ·∫©m: 75%\nüí® Gi√≥: 15 km/h',
  sos: 'üö® C·∫¢NH B√ÅO: T√≠n hi·ªáu SOS ƒë√£ ƒë∆∞·ª£c g·ª≠i!\n\nüìû ƒêang k·∫øt n·ªëi v·ªõi trung t√¢m c·ª©u h·ªô...\nüìç V·ªã tr√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i\n‚è∞ Th·ªùi gian: ' + new Date().toLocaleTimeString('vi-VN'),
  plants: 'üå± G·ª¢I √ù C√ÇY TR·ªíNG THEO TH·ªúI TI·∫æT:\n\n‚òÄÔ∏è Th·ªùi ti·∫øt n·∫Øng ·∫•m (28¬∞C):\n‚Ä¢ C√† chua üçÖ\n‚Ä¢ D∆∞a chu·ªôt ü•í\n‚Ä¢ Rau mu·ªëng ü•¨\n‚Ä¢ Hoa h∆∞·ªõng d∆∞∆°ng üåª\n\nüí° L∆∞u √Ω: T∆∞·ªõi n∆∞·ªõc v√†o bu·ªïi s√°ng s·ªõm',
  alerts: '‚ö†Ô∏è C·∫¢NH B√ÅO TH·ªúI TI·∫æT:\n\nüåßÔ∏è D·ª± b√°o m∆∞a l·ªõn trong 2 ng√†y t·ªõi\nüå™Ô∏è Gi√≥ m·∫°nh c·∫•p 6-7\nüåä Nguy c∆° ng·∫≠p √∫ng ·ªü v√πng tr≈©ng\n\nüìã Khuy·∫øn ngh·ªã:\n‚Ä¢ H·∫°n ch·∫ø ra ngo√†i\n‚Ä¢ Chu·∫©n b·ªã ƒë·ªì d·ª± ph√≤ng\n‚Ä¢ Theo d√µi tin t·ª©c'
};

// üî¥ DISASTER WARNING SYSTEM - H·ªá th·ªëng c·∫£nh b√°o thi√™n tai
const disasterWarningSystem = {
  // D·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng c·∫£nh b√°o
  currentAlerts: [],
  riskAssessment: {
    overall: 57,
    risks: [
      { name: 'Flood', level: 70, color: 'red' },
      { name: 'Storm', level: 60, color: 'orange' },
      { name: 'Thunderstorm', level: 80, color: 'red' },
      { name: 'Heavy Rain', level: 85, color: 'red' },
      { name: 'Landslide', level: 65, color: 'yellow' },
      { name: 'Heat Wave', level: 30, color: 'green' },
      { name: 'Drought', level: 10, color: 'blue' }
    ]
  },
  disasterHistory: [],
  
  // H∆∞·ªõng d·∫´n ·ª©ng ph√≥ kh·∫©n c·∫•p
  emergencyGuides: {
    flood: [
      'Di chuy·ªÉn ƒë·∫øn cao h∆°n',
      'Tr√°nh xa d√≤ng n∆∞·ªõc ch·∫£y',
      'Chu·∫©n b·ªã ƒë·ªì d√πng kh·∫©n c·∫•p',
      'Theo d√µi th√¥ng tin c·∫£nh b√°o'
    ],
    storm: [
      'Gia c·ªë nh√† c·ª≠a',
      'D·ª± tr·ªØ th·ª±c ph·∫©m v√† n∆∞·ªõc',
      'Tr√°nh ra ngo√†i khi b√£o ƒë·ªï b·ªô',
      'Chu·∫©n b·ªã ƒë√®n pin v√† pin d·ª± ph√≤ng'
    ],
    landslide: [
      'Tr√°nh xa khu v·ª±c d·ªëc',
      'Quan s√°t c√°c d·∫•u hi·ªáu b·∫•t th∆∞·ªùng',
      'Di t·∫£n khi c√≥ c·∫£nh b√°o',
      'Kh√¥ng x√¢y d·ª±ng g·∫ßn s∆∞·ªùn n√∫i'
    ]
  }
};

// Initialize charts
function initializeCharts() {
  // Temperature Chart
  const temperatureChart = echarts.init(document.getElementById("temperatureChart"));
  temperatureChart.setOption({
    tooltip: { 
      trigger: "axis",
      backgroundColor: 'rgba(255, 255, 255, 0.9)',
      borderColor: '#2563eb',
      textStyle: { color: '#1e293b' }
    },
    xAxis: { 
      type: "category", 
      data: weatherData.days,
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b' }
    },
    yAxis: { 
      type: "value",
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b' },
      splitLine: { lineStyle: { color: '#f1f5f9' } }
    },
    series: [{
      name: "Nhi·ªát ƒë·ªô (¬∞C)",
      type: "line",
      data: weatherData.temperature,
      smooth: true,
      lineStyle: { color: "#FF6347", width: 3 },
      areaStyle: { 
        color: {
          type: 'linear',
          x: 0, y: 0, x2: 0, y2: 1,
          colorStops: [
            { offset: 0, color: 'rgba(255, 99, 71, 0.3)' },
            { offset: 1, color: 'rgba(255, 99, 71, 0.1)' }
          ]
        }
      },
      itemStyle: { color: '#FF6347' },
      emphasis: { focus: 'series' }
    }]
  });

  // Humidity Chart
  const humidityChart = echarts.init(document.getElementById("humidityChart"));
  humidityChart.setOption({
    tooltip: { 
      trigger: "axis",
      backgroundColor: 'rgba(255, 255, 255, 0.9)',
      borderColor: '#1E90FF',
      textStyle: { color: '#1e293b' }
    },
    xAxis: { 
      type: "category", 
      data: weatherData.days,
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b' }
    },
    yAxis: { 
      type: "value",
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b' },
      splitLine: { lineStyle: { color: '#f1f5f9' } }
    },
    series: [{
      name: "ƒê·ªô ·∫©m (%)",
      type: "bar",
      data: weatherData.humidity,
      itemStyle: { 
        color: {
          type: 'linear',
          x: 0, y: 0, x2: 0, y2: 1,
          colorStops: [
            { offset: 0, color: '#1E90FF' },
            { offset: 1, color: '#87CEEB' }
          ]
        }
      },
      emphasis: { focus: 'series' }
    }]
  });

  // Rainfall Chart
  const rainfallChart = echarts.init(document.getElementById("rainfallChart"));
  rainfallChart.setOption({
    tooltip: { 
      trigger: "axis",
      backgroundColor: 'rgba(255, 255, 255, 0.9)',
      borderColor: '#32CD32',
      textStyle: { color: '#1e293b' }
    },
    xAxis: { 
      type: "category", 
      data: weatherData.days,
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b' }
    },
    yAxis: { 
      type: "value",
      axisLine: { lineStyle: { color: '#e2e8f0' } },
      axisTick: { lineStyle: { color: '#e2e8f0' } },
      axisLabel: { color: '#64748b' },
      splitLine: { lineStyle: { color: '#f1f5f9' } }
    },
    series: [{
      name: "L∆∞·ª£ng m∆∞a (mm)",
      type: "bar",
      data: weatherData.rainfall,
      itemStyle: { 
        color: {
          type: 'linear',
          x: 0, y: 0, x2: 0, y2: 1,
          colorStops: [
            { offset: 0, color: '#32CD32' },
            { offset: 1, color: '#98FB98' }
          ]
        }
      },
      emphasis: { focus: 'series' }
    }]
  });

  // Make charts responsive
  window.addEventListener('resize', () => {
    temperatureChart.resize();
    humidityChart.resize();
    rainfallChart.resize();
  });
}

// Initialize map
function initializeMap() {
  const map = L.map('map').setView([16.0471, 108.2062], 6);
  
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);

  // Bi·∫øn l∆∞u tr·ªØ v·ªã tr√≠ hi·ªán t·∫°i v√† marker
  let currentLocationMarker = null;
  let currentPosition = null;
  let watchId = null;

  // Add some weather markers
  const weatherMarkers = [
    { lat: 21.0285, lng: 105.8542, city: 'H√† N·ªôi', temp: '26¬∞C', weather: '‚òÅÔ∏è' },
    { lat: 10.8231, lng: 106.6297, city: 'TP.HCM', temp: '30¬∞C', weather: '‚òÄÔ∏è' },
    { lat: 16.0471, lng: 108.2062, city: 'ƒê√† N·∫µng', temp: '28¬∞C', weather: 'üå§Ô∏è' },
    { lat: 10.0452, lng: 105.7469, city: 'C·∫ßn Th∆°', temp: '29¬∞C', weather: 'üåßÔ∏è' }
  ];

  weatherMarkers.forEach(marker => {
    L.marker([marker.lat, marker.lng])
      .addTo(map)
      .bindPopup(`
        <div class="text-center">
          <h3 class="font-bold text-lg">${marker.city}</h3>
          <p class="text-2xl">${marker.weather}</p>
          <p class="text-xl font-semibold text-blue-600">${marker.temp}</p>
        </div>
      `);
  });

  // Th√™m n√∫t ƒëi·ªÅu khi·ªÉn v·ªã tr√≠
  const locationControl = L.control({ position: 'topright' });
  locationControl.onAdd = function(map) {
    const div = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');
    
    div.innerHTML = `
      <div class="location-controls bg-white rounded-lg shadow-lg p-2">
        <button id="locateBtn" class="location-btn bg-blue-500 text-white p-2 rounded mb-2 hover:bg-blue-600 transition-colors" title="T√¨m v·ªã tr√≠ c·ªßa t√¥i">
          <i class="ri-map-pin-line text-lg"></i>
        </button>
        <button id="returnBtn" class="location-btn bg-green-500 text-white p-2 rounded hover:bg-green-600 transition-colors" title="Quay v·ªÅ v·ªã tr√≠ c·ªßa t√¥i" style="display: none;">
          <i class="ri-navigation-line text-lg"></i>
        </button>
      </div>
    `;
    
    div.style.backgroundColor = 'transparent';
    div.style.border = 'none';
    
    return div;
  };
  locationControl.addTo(map);

  // X·ª≠ l√Ω s·ª± ki·ªán n√∫t ƒë·ªãnh v·ªã
  document.addEventListener('click', function(e) {
    if (e.target.closest('#locateBtn')) {
      locateCurrentPosition();
    }
    if (e.target.closest('#returnBtn')) {
      returnToCurrentLocation();
    }
  });

  // H√†m ƒë·ªãnh v·ªã v·ªã tr√≠ hi·ªán t·∫°i
  function locateCurrentPosition() {
    const locateBtn = document.getElementById('locateBtn');
    const returnBtn = document.getElementById('returnBtn');
    
    if (!navigator.geolocation) {
      alert('Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ƒë·ªãnh v·ªã GPS');
      return;
    }

    // Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang t√¨m
    locateBtn.innerHTML = '<i class="ri-loader-4-line text-lg animate-spin"></i>';
    locateBtn.disabled = true;

    // Th·ª≠ l·∫•y v·ªã tr√≠ v·ªõi ƒë·ªô ch√≠nh x√°c cao tr∆∞·ªõc
    const highAccuracyOptions = {
      enableHighAccuracy: true,
      timeout: 15000,
      maximumAge: 0 // Kh√¥ng s·ª≠ d·ª•ng cache c≈©
    };

    // Th·ª≠ l·∫•y v·ªã tr√≠ nhi·ªÅu l·∫ßn ƒë·ªÉ c√≥ ƒë·ªô ch√≠nh x√°c t·ªët h∆°n
    let attempts = 0;
    let bestPosition = null;
    let bestAccuracy = Infinity;

    function tryGetLocation() {
      attempts++;
      
      navigator.geolocation.getCurrentPosition(
        function(position) {
          const accuracy = position.coords.accuracy;
          
          // L∆∞u v·ªã tr√≠ c√≥ ƒë·ªô ch√≠nh x√°c t·ªët nh·∫•t
          if (accuracy < bestAccuracy) {
            bestAccuracy = accuracy;
            bestPosition = position;
          }
          
          // N·∫øu ƒë·ªô ch√≠nh x√°c ƒë·ªß t·ªët (< 50m) ho·∫∑c ƒë√£ th·ª≠ 3 l·∫ßn, s·ª≠ d·ª•ng k·∫øt qu·∫£ t·ªët nh·∫•t
          if (accuracy < 50 || attempts >= 3) {
            processLocationResult(bestPosition);
          } else {
            // Th·ª≠ l·∫°i sau 1 gi√¢y
            setTimeout(tryGetLocation, 1000);
          }
        },
        function(error) {
          if (attempts < 3) {
            // Th·ª≠ l·∫°i v·ªõi ƒë·ªô ch√≠nh x√°c th·∫•p h∆°n
            setTimeout(() => {
              navigator.geolocation.getCurrentPosition(
                processLocationResult,
                handleLocationError,
                {
                  enableHighAccuracy: false,
                  timeout: 10000,
                  maximumAge: 30000
                }
              );
            }, 1000);
          } else {
            handleLocationError(error);
          }
        },
        highAccuracyOptions
      );
    }

    function processLocationResult(position) {
      const lat = position.coords.latitude;
      const lng = position.coords.longitude;
      const accuracy = position.coords.accuracy;
      
      currentPosition = { lat, lng };
      
      // X√≥a marker c≈© n·∫øu c√≥
      if (currentLocationMarker) {
        map.removeLayer(currentLocationMarker);
      }
      
      // T·∫°o marker m·ªõi cho v·ªã tr√≠ hi·ªán t·∫°i v·ªõi m√†u s·∫Øc theo ƒë·ªô ch√≠nh x√°c
      let markerColor = 'bg-blue-500';
      let accuracyText = 'T·ªët';
      
      if (accuracy > 100) {
        markerColor = 'bg-red-500';
        accuracyText = 'K√©m';
      } else if (accuracy > 50) {
        markerColor = 'bg-yellow-500';
        accuracyText = 'Trung b√¨nh';
      } else if (accuracy <= 20) {
        markerColor = 'bg-green-500';
        accuracyText = 'R·∫•t t·ªët';
      }
      
      currentLocationMarker = L.marker([lat, lng], {
        icon: L.divIcon({
          className: 'current-location-marker',
          html: `<div class="${markerColor} w-4 h-4 rounded-full border-2 border-white shadow-lg animate-pulse"></div>`,
          iconSize: [16, 16],
          iconAnchor: [8, 8]
        })
      }).addTo(map);
      
      // Th√™m v√≤ng tr√≤n hi·ªÉn th·ªã ƒë·ªô ch√≠nh x√°c
      const accuracyCircle = L.circle([lat, lng], {
        radius: accuracy,
        fillColor: markerColor.replace('bg-', '').replace('-500', ''),
        fillOpacity: 0.1,
        color: markerColor.replace('bg-', '').replace('-500', ''),
        weight: 1,
        opacity: 0.3
      }).addTo(map);
      
      // L∆∞u circle ƒë·ªÉ c√≥ th·ªÉ x√≥a sau
      currentLocationMarker.accuracyCircle = accuracyCircle;
      
      // L·∫•y th√¥ng tin ƒë·ªãa ph∆∞∆°ng
      getLocationInfo(lat, lng).then(locationInfo => {
        currentLocationMarker.bindPopup(`
          <div class="text-center p-2">
            <h3 class="font-bold text-lg text-blue-600">üìç V·ªã tr√≠ c·ªßa b·∫°n</h3>
            <p class="text-sm text-gray-600 mt-1">${locationInfo}</p>
            <div class="mt-2 p-2 bg-gray-50 rounded">
              <p class="text-xs text-gray-600">ƒê·ªô ch√≠nh x√°c: ${Math.round(accuracy)}m (${accuracyText})</p>
              <p class="text-xs text-gray-500">T·ªça ƒë·ªô: ${lat.toFixed(6)}, ${lng.toFixed(6)}</p>
              <p class="text-xs text-gray-400">${new Date().toLocaleString('vi-VN')}</p>
            </div>
            <button onclick="recalibrateLocation()" class="mt-2 px-3 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600">
              üîÑ Hi·ªáu ch·ªânh l·∫°i
            </button>
          </div>
        `).openPopup();
      });
      
      // Di chuy·ªÉn b·∫£n ƒë·ªì ƒë·∫øn v·ªã tr√≠ v·ªõi zoom ph√π h·ª£p theo ƒë·ªô ch√≠nh x√°c
      let zoomLevel = 15;
      if (accuracy > 100) zoomLevel = 13;
      else if (accuracy > 50) zoomLevel = 14;
      else if (accuracy <= 20) zoomLevel = 16;
      
      map.setView([lat, lng], zoomLevel);
      
      // Kh√¥i ph·ª•c n√∫t v√† hi·ªÉn th·ªã n√∫t quay v·ªÅ
      locateBtn.innerHTML = '<i class="ri-map-pin-line text-lg"></i>';
      locateBtn.disabled = false;
      returnBtn.style.display = 'block';
      
      // B·∫Øt ƒë·∫ßu theo d√µi v·ªã tr√≠
      startLocationTracking();
    }

    function handleLocationError(error) {
      let errorMessage = 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ c·ªßa b·∫°n';
      let suggestion = '';
      
      switch(error.code) {
        case error.PERMISSION_DENIED:
          errorMessage = 'B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p v·ªã tr√≠';
          suggestion = 'Vui l√≤ng cho ph√©p truy c·∫≠p v·ªã tr√≠ trong c√†i ƒë·∫∑t tr√¨nh duy·ªát';
          break;
        case error.POSITION_UNAVAILABLE:
          errorMessage = 'Th√¥ng tin v·ªã tr√≠ kh√¥ng kh·∫£ d·ª•ng';
          suggestion = 'H√£y th·ª≠ di chuy·ªÉn ra ngo√†i tr·ªùi ho·∫∑c g·∫ßn c·ª≠a s·ªï';
          break;
        case error.TIMEOUT:
          errorMessage = 'Y√™u c·∫ßu ƒë·ªãnh v·ªã ƒë√£ h·∫øt th·ªùi gian';
          suggestion = 'H√£y th·ª≠ l·∫°i sau √≠t ph√∫t';
          break;
      }
      
      alert(`${errorMessage}\n\nüí° G·ª£i √Ω: ${suggestion}`);
      locateBtn.innerHTML = '<i class="ri-map-pin-line text-lg"></i>';
      locateBtn.disabled = false;
    }
    // B·∫Øt ƒë·∫ßu qu√° tr√¨nh ƒë·ªãnh v·ªã
    tryGetLocation();
  }

  // H√†m quay v·ªÅ v·ªã tr√≠ hi·ªán t·∫°i
  function returnToCurrentLocation() {
    if (currentPosition && currentLocationMarker) {
      map.setView([currentPosition.lat, currentPosition.lng], 15);
      currentLocationMarker.openPopup();
    }
  }

  // H√†m theo d√µi v·ªã tr√≠ li√™n t·ª•c
  function startLocationTracking() {
    if (watchId) {
      navigator.geolocation.clearWatch(watchId);
    }
    
    watchId = navigator.geolocation.watchPosition(
      function(position) {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;
        const accuracy = position.coords.accuracy;
        
        // C·∫≠p nh·∫≠t v·ªã tr√≠ hi·ªán t·∫°i
        currentPosition = { lat, lng };
        
        // C·∫≠p nh·∫≠t marker
        if (currentLocationMarker) {
          currentLocationMarker.setLatLng([lat, lng]);
          
          // C·∫≠p nh·∫≠t v√≤ng tr√≤n ƒë·ªô ch√≠nh x√°c
          if (currentLocationMarker.accuracyCircle) {
            map.removeLayer(currentLocationMarker.accuracyCircle);
          }
          
          currentLocationMarker.accuracyCircle = L.circle([lat, lng], {
            radius: accuracy,
            fillColor: accuracy <= 50 ? 'blue' : accuracy <= 100 ? 'yellow' : 'red',
            fillOpacity: 0.1,
            color: accuracy <= 50 ? 'blue' : accuracy <= 100 ? 'yellow' : 'red',
            weight: 1,
            opacity: 0.3
          }).addTo(map);
          
          // C·∫≠p nh·∫≠t th√¥ng tin popup
          getLocationInfo(lat, lng).then(locationInfo => {
            const accuracyText = accuracy <= 20 ? 'R·∫•t t·ªët' : accuracy <= 50 ? 'T·ªët' : accuracy <= 100 ? 'Trung b√¨nh' : 'K√©m';
            currentLocationMarker.setPopupContent(`
              <div class="text-center p-2">
                <h3 class="font-bold text-lg text-blue-600">üìç V·ªã tr√≠ c·ªßa b·∫°n</h3>
                <p class="text-sm text-gray-600 mt-1">${locationInfo}</p>
                <div class="mt-2 p-2 bg-gray-50 rounded">
                  <p class="text-xs text-gray-600">ƒê·ªô ch√≠nh x√°c: ${Math.round(accuracy)}m (${accuracyText})</p>
                  <p class="text-xs text-gray-500">T·ªça ƒë·ªô: ${lat.toFixed(6)}, ${lng.toFixed(6)}</p>
                  <p class="text-xs text-gray-400">${new Date().toLocaleString('vi-VN')}</p>
                  <p class="text-xs text-green-500">üîÑ ƒêang c·∫≠p nh·∫≠t...</p>
                </div>
                <button onclick="recalibrateLocation()" class="mt-2 px-3 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600">
                  üîÑ Hi·ªáu ch·ªânh l·∫°i
                </button>
              </div>
            `);
          });
        }
      },
      function(error) {
        console.log('L·ªói theo d√µi v·ªã tr√≠:', error);
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 10000
      }
    );
  }

  // H√†m l·∫•y th√¥ng tin ƒë·ªãa ph∆∞∆°ng t·ª´ t·ªça ƒë·ªô
  async function getLocationInfo(lat, lng) {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}&accept-language=vi`);
      const data = await response.json();
      
      if (data && data.display_name) {
        // L·∫•y th√¥ng tin ƒë·ªãa ph∆∞∆°ng t·ª´ k·∫øt qu·∫£
        const address = data.address || {};
        const parts = [];
        
        if (address.road) parts.push(address.road);
        if (address.suburb || address.neighbourhood) parts.push(address.suburb || address.neighbourhood);
        if (address.city || address.town || address.village) parts.push(address.city || address.town || address.village);
        if (address.state) parts.push(address.state);
        if (address.country) parts.push(address.country);
        
        return parts.length > 0 ? parts.join(', ') : data.display_name;
      }
      
      return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
    } catch (error) {
      console.log('L·ªói l·∫•y th√¥ng tin ƒë·ªãa ph∆∞∆°ng:', error);
      return `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
    }
  }

  // D·ªçn d·∫πp khi trang ƒë∆∞·ª£c ƒë√≥ng
  window.addEventListener('beforeunload', function() {
    if (watchId) {
      navigator.geolocation.clearWatch(watchId);
    }
  });
  return map;
  // H√†m hi·ªáu ch·ªânh l·∫°i v·ªã tr√≠ (c√≥ th·ªÉ g·ªçi t·ª´ popup)
  window.recalibrateLocation = function() {
    locateCurrentPosition();
  };
}

// Locate user function
function locateUser() {
  // S·ª≠ d·ª•ng h√†m ƒë·ªãnh v·ªã m·ªõi
  const locateBtn = document.getElementById('locateBtn');
  if (locateBtn) {
    locateBtn.click();
  } else {
    // Fallback cho tr∆∞·ªùng h·ª£p n√∫t ch∆∞a ƒë∆∞·ª£c t·∫°o
    setTimeout(() => {
      const btn = document.getElementById('locateBtn');
      if (btn) btn.click();
    }, 1000);
  }
}

// Handle feature button clicks
function handleFeatureClick(feature) {
  const message = featureMessages[feature];
  if (message) {
    alert(message);
  }
}

// Search functionality
function handleLocationSearch() {
  const searchInput = document.getElementById('locationSearch');
  const query = searchInput.value.trim();
  
  if (query) {
    // Mock search functionality
    alert(`üîç ƒêang t√¨m ki·∫øm th·ªùi ti·∫øt cho: "${query}"\n\nK·∫øt qu·∫£ s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n b·∫£n ƒë·ªì.`);
    searchInput.value = '';
  }
}

// Smooth scrolling for navigation links
function initializeSmoothScrolling() {
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href'));
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });
}

// Add fade-in animation to elements
function addFadeInAnimation() {
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('fade-in');
      }
    });
  });

  document.querySelectorAll('.weather-card').forEach(card => {
    observer.observe(card);
  });
}

// Initialize everything when DOM is loaded
document.addEventListener("DOMContentLoaded", () => {
  // Start clock
  setInterval(updateClock, 1000);
  updateClock();

  // Initialize charts
  initializeCharts();

  // Initialize map
  window.weatherMap = initializeMap();

  // Add event listeners for feature buttons
  document.querySelectorAll('.feature-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      const feature = btn.getAttribute('data-feature');
      handleFeatureClick(feature);
    });
  });

  // Add search functionality
  const searchInput = document.getElementById('locationSearch');
  searchInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      handleLocationSearch();
    }
  });

  // Initialize smooth scrolling
  initializeSmoothScrolling();

  // Add fade-in animations
  addFadeInAnimation();

  // Make locateUser function globally available
  window.locateUser = locateUser;
});

// Handle window resize for responsive charts
window.addEventListener('resize', () => {
  // Charts will auto-resize due to the resize listeners in initializeCharts
});

// Add some interactive features
document.addEventListener('DOMContentLoaded', () => {
  // Add hover effects to navigation
  const navLinks = document.querySelectorAll('nav a');
  navLinks.forEach(link => {
    link.addEventListener('mouseenter', () => {
      link.style.transform = 'translateY(-2px)';
    });
    
    link.addEventListener('mouseleave', () => {
      link.style.transform = 'translateY(0)';
    });
  });

  // Add click effect to weather cards
  document.querySelectorAll('.weather-card').forEach(card => {
    card.addEventListener('click', () => {
      card.style.transform = 'scale(0.98)';
      setTimeout(() => {
        card.style.transform = '';
      }, 150);
    });
  });
});
// üî¥ DISASTER WARNING FUNCTIONS - C√°c h√†m c·∫£nh b√°o thi√™n tai

// M·ªü modal c·∫£nh b√°o thi√™n tai
function openDisasterWarningModal() {
  const modal = document.getElementById('disasterModal');
  const updateTime = document.getElementById('updateTime');
  
  // C·∫≠p nh·∫≠t th·ªùi gian
  updateTime.textContent = new Date().toLocaleString('vi-VN');
  
  // Hi·ªÉn th·ªã modal
  modal.classList.remove('hidden');
  document.body.style.overflow = 'hidden';
  
  // T·∫£i d·ªØ li·ªáu c·∫£nh b√°o
  loadDisasterData();
}

// ƒê√≥ng modal c·∫£nh b√°o thi√™n tai
function closeDisasterWarningModal() {
  const modal = document.getElementById('disasterModal');
  modal.classList.add('hidden');
  document.body.style.overflow = 'auto';
}

// T·∫£i d·ªØ li·ªáu c·∫£nh b√°o
function loadDisasterData() {
  // C·∫≠p nh·∫≠t c·∫£nh b√°o hi·ªán t·∫°i
  updateCurrentAlerts();
  
  // C·∫≠p nh·∫≠t ƒë√°nh gi√° r·ªßi ro
  updateRiskAssessment();
  
  // C·∫≠p nh·∫≠t l·ªãch s·ª≠ thi√™n tai
  updateDisasterHistory();
}

// C·∫≠p nh·∫≠t c·∫£nh b√°o hi·ªán t·∫°i
function updateCurrentAlerts() {
  const alertsContainer = document.getElementById('currentAlerts');
  const alertCount = document.querySelector('h3:contains("C·∫£nh b√°o hi·ªán t·∫°i")');
  
  if (disasterWarningSystem.currentAlerts.length === 0) {
    alertsContainer.innerHTML = `
      <i class="ri-shield-check-line text-green-500 text-4xl mb-3"></i>
      <p class="text-gray-600 text-lg">Kh√¥ng c√≥ c·∫£nh b√°o n√†o</p>
      <p class="text-gray-500 text-sm mt-2">Khu v·ª±c c·ªßa b·∫°n hi·ªán t·∫°i an to√†n</p>
    `;
  } else {
    // Hi·ªÉn th·ªã c√°c c·∫£nh b√°o n·∫øu c√≥
    let alertsHTML = '';
    disasterWarningSystem.currentAlerts.forEach(alert => {
      alertsHTML += `
        <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-3 rounded">
          <div class="flex items-center">
            <i class="ri-alarm-warning-line text-red-500 text-xl mr-3"></i>
            <div>
              <h4 class="font-bold text-red-800">${alert.title}</h4>
              <p class="text-red-600 text-sm">${alert.description}</p>
              <p class="text-red-500 text-xs mt-1">${alert.time}</p>
            </div>
          </div>
        </div>
      `;
    });
    alertsContainer.innerHTML = alertsHTML;
  }
}

// C·∫≠p nh·∫≠t ƒë√°nh gi√° r·ªßi ro
function updateRiskAssessment() {
  // C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë t·ªïng th·ªÉ
  const overallScore = document.querySelector('.w-24.h-24 span');
  if (overallScore) {
    overallScore.textContent = disasterWarningSystem.riskAssessment.overall;
  }
  
  // C·∫≠p nh·∫≠t c√°c thanh ti·∫øn tr√¨nh r·ªßi ro (ƒë√£ c√≥ trong HTML)
}

// C·∫≠p nh·∫≠t l·ªãch s·ª≠ thi√™n tai
function updateDisasterHistory() {
  // Hi·ªán t·∫°i kh√¥ng c√≥ s·ª± ki·ªán n√†o trong 30 ng√†y qua
  // C√≥ th·ªÉ m·ªü r·ªông ƒë·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠ th·ª±c t·∫ø
}

// L√†m m·ªõi c·∫£nh b√°o
function refreshAlerts() {
  const button = event.target.closest('button');
  const originalHTML = button.innerHTML;
  
  // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
  button.innerHTML = '<i class="ri-loader-4-line animate-spin"></i> ƒêang t·∫£i...';
  button.disabled = true;
  
  // Gi·∫£ l·∫≠p vi·ªác t·∫£i d·ªØ li·ªáu
  setTimeout(() => {
    // C·∫≠p nh·∫≠t th·ªùi gian
    document.getElementById('updateTime').textContent = new Date().toLocaleString('vi-VN');
    
    // T·∫£i l·∫°i d·ªØ li·ªáu
    loadDisasterData();
    
    // Kh√¥i ph·ª•c n√∫t
    button.innerHTML = originalHTML;
    button.disabled = false;
    
    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    showNotification('ƒê√£ c·∫≠p nh·∫≠t c·∫£nh b√°o m·ªõi nh·∫•t!', 'success');
  }, 2000);
}

// ƒêƒÉng k√Ω th√¥ng b√°o
function subscribeAlerts() {
  if ('Notification' in window) {
    if (Notification.permission === 'granted') {
      showNotification('B·∫°n ƒë√£ ƒëƒÉng k√Ω nh·∫≠n th√¥ng b√°o c·∫£nh b√°o thi√™n tai!', 'success');
    } else if (Notification.permission !== 'denied') {
      Notification.requestPermission().then(permission => {
        if (permission === 'granted') {
          showNotification('ƒê√£ b·∫≠t th√¥ng b√°o c·∫£nh b√°o thi√™n tai!', 'success');
        } else {
          showNotification('Vui l√≤ng cho ph√©p th√¥ng b√°o ƒë·ªÉ nh·∫≠n c·∫£nh b√°o k·ªãp th·ªùi!', 'warning');
        }
      });
    } else {
      showNotification('Vui l√≤ng b·∫≠t th√¥ng b√°o trong c√†i ƒë·∫∑t tr√¨nh duy·ªát!', 'warning');
    }
  } else {
    showNotification('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ th√¥ng b√°o!', 'error');
  }
}

// Chia s·∫ª c·∫£nh b√°o
function shareAlerts() {
  const shareData = {
    title: 'C·∫£nh b√°o thi√™n tai - Weather & Life',
    text: 'Theo d√µi t√¨nh h√¨nh thi√™n tai v√† c·∫£nh b√°o k·ªãp th·ªùi t·∫°i khu v·ª±c c·ªßa b·∫°n',
    url: window.location.href
  };
  
  if (navigator.share) {
    navigator.share(shareData).then(() => {
      showNotification('ƒê√£ chia s·∫ª th√†nh c√¥ng!', 'success');
    }).catch(() => {
      fallbackShare();
    });
  } else {
    fallbackShare();
  }
}

// Chia s·∫ª d·ª± ph√≤ng
function fallbackShare() {
  const url = window.location.href;
  navigator.clipboard.writeText(url).then(() => {
    showNotification('ƒê√£ sao ch√©p link v√†o clipboard!', 'success');
  }).catch(() => {
    showNotification('Kh√¥ng th·ªÉ chia s·∫ª. Vui l√≤ng sao ch√©p link th·ªß c√¥ng!', 'warning');
  });
}

// Hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message, type = 'info') {
  // T·∫°o element th√¥ng b√°o
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 translate-x-full`;
  
  // M√†u s·∫Øc theo lo·∫°i th√¥ng b√°o
  const colors = {
    success: 'bg-green-500 text-white',
    warning: 'bg-yellow-500 text-white',
    error: 'bg-red-500 text-white',
    info: 'bg-blue-500 text-white'
  };
  
  notification.className += ` ${colors[type] || colors.info}`;
  
  notification.innerHTML = `
    <div class="flex items-center gap-3">
      <i class="ri-${type === 'success' ? 'check' : type === 'warning' ? 'alert' : type === 'error' ? 'close' : 'information'}-line text-xl"></i>
      <p class="flex-1">${message}</p>
      <button onclick="this.parentElement.parentElement.remove()" class="text-white hover:bg-white hover:bg-opacity-20 p-1 rounded">
        <i class="ri-close-line"></i>
      </button>
    </div>
  `;
  
  document.body.appendChild(notification);
  
  // Hi·ªÉn th·ªã v·ªõi animation
  setTimeout(() => {
    notification.classList.remove('translate-x-full');
  }, 100);
  
  // T·ª± ƒë·ªông ·∫©n sau 5 gi√¢y
  setTimeout(() => {
    notification.classList.add('translate-x-full');
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 300);
  }, 5000);
}

// ƒê√≥ng modal khi click b√™n ngo√†i
document.addEventListener('click', function(e) {
  const modal = document.getElementById('disasterModal');
  if (e.target === modal) {
    closeDisasterWarningModal();
  }
});

// ƒê√≥ng modal khi nh·∫•n ESC
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    const modal = document.getElementById('disasterModal');
    if (!modal.classList.contains('hidden')) {
      closeDisasterWarningModal();
    }
  }
});
